{"version":3,"sources":["components/contactForm/contactForm.js","components/contactList/contactList.js","components/modal/modal.js","components/contactEditor/contactEditor.js","view/ContactsView.js"],"names":["style","container","justifyContent","alignItems","padding","border","title","fontWeight","fontSize","textAlign","ContactForm","allContacts","useSelector","contactsSelectors","getAllContacts","dispatch","useDispatch","useState","name","setName","number","setNumber","handleChange","target","value","Form","onSubmit","evt","preventDefault","alert","find","contact","toLowerCase","contactsOperations","addContact","Group","controlId","Label","Control","type","placeholder","onChange","autoComplete","Text","className","Button","variant","size","contactItem","display","margin","borderRadius","button","marginLeft","text","ContactList","openModal","getId","filter","setFilter","useEffect","filterItems","contacts","includes","InputGroup","Prepend","id","e","aria-label","aria-describedby","length","ListGroup","map","item","Item","onClick","deleteContact","modalRoot","document","querySelector","ModalEdition","showModal","onClose","children","handleKeyDown","code","window","addEventListener","createPortal","Modal","show","onHide","aria-labelledby","centered","event","currentTarget","Header","closeButton","Title","Body","Footer","ContactEditor","onSave","idForUpdate","credentials","updateContact","styles","minHeight","ContactsView","isModalOpen","setIsModalOpen","setIdForUpdate","toggleModal","state","role"],"mappings":"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","file":"static/js/6.7cf78854.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst style = {\r\n  container: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: '20px',\r\n    border: '2px solid #39c4ef',\r\n  },\r\n  title: {\r\n    fontWeight: 500,\r\n    fontSize: 48,\r\n    textAlign: 'center',\r\n  },\r\n};\r\n\r\nfunction ContactForm() {\r\n  const allContacts = useSelector(contactsSelectors.getAllContacts);\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        return setName(value);\r\n      case 'number':\r\n        return setNumber(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    name === '' || number === ''\r\n      ? alert('PLEASE, ENTER NAME OR TELEPHONE NUMBER')\r\n      : allContacts.find(contact =>\r\n          contact.name.toLowerCase() === name.toLowerCase()\r\n            ? alert(name + ' is already in contacts')\r\n            : dispatch(contactsOperations.addContact({ name, number })),\r\n        );\r\n\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit} style={style.container}>\r\n      <Form.Group controlId=\"formBasicName\">\r\n        <Form.Label>Name</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Enter name of new contact\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          autoComplete=\"off\"\r\n        />\r\n        <Form.Text className=\"text-muted\">\r\n          Please enter the name of which is not in your phone book\r\n        </Form.Text>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formBasicNumber\" autoComplete=\"off\">\r\n        <Form.Label>Telephone number</Form.Label>\r\n        <Form.Control\r\n          type=\"number\"\r\n          placeholder=\"Enter telephone number of new contact \"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          autoComplete=\"off\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" size=\"lg\" type=\"submit\">\r\n        Add contact\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nconst style = {\r\n  contactItem: {\r\n    display: 'flex',\r\n    alignItems: 'baseline',\r\n    justifyContent: 'space-around',\r\n    margin: '5px',\r\n    borderRadius: '10px',\r\n  },\r\n  button: {\r\n    marginLeft: '10px',\r\n  },\r\n  text: {\r\n    fontSize: '20px',\r\n    fontWeight: 'bold',\r\n  },\r\n};\r\n\r\nfunction ContactList({ openModal, getId }) {\r\n  const allContacts = useSelector(contactsSelectors.getAllContacts);\r\n  const dispatch = useDispatch();\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.getAllContacts());\r\n  }, [dispatch]);\r\n\r\n  const filterContacts = (allContactsItems, filterItems) => {\r\n    return allContactsItems.filter(contact =>\r\n      contact.name.toLowerCase().includes(filterItems.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  const contacts = filterContacts(allContacts, filter);\r\n\r\n  return (\r\n    <>\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text id=\"inputGroup-sizing-lg\">\r\n            Find contacts by name\r\n          </InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={filter}\r\n          onChange={e => setFilter(e.target.value)}\r\n          autoComplete=\"off\"\r\n          placeholder=\"Enter name\"\r\n          aria-label=\"Large\"\r\n          aria-describedby=\"inputGroup-sizing-sm\"\r\n        />\r\n      </InputGroup>\r\n\r\n      <br />\r\n      {contacts.length === 0 ? (\r\n        <p className=\"contact-item__text\">\r\n          There are no contacts on your list yet\r\n        </p>\r\n      ) : (\r\n        <ListGroup>\r\n          {contacts.map(item => (\r\n            <ListGroup.Item\r\n              key={item.id}\r\n              style={style.contactItem}\r\n              variant=\"info\"\r\n            >\r\n              <span style={style.text}>\r\n                {item.name} : {item.number}\r\n              </span>\r\n              <span>\r\n                <Button\r\n                  variant=\"outline-primary\"\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    getId(item.id);\r\n                    openModal();\r\n                  }}\r\n                >\r\n                  Update\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline-primary\"\r\n                  style={style.button}\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    dispatch(contactsOperations.deleteContact(item.id));\r\n                  }}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </span>\r\n            </ListGroup.Item>\r\n          ))}\r\n        </ListGroup>\r\n      )}\r\n\r\n      {/* <ul className=\"contact-list\">\r\n        {contacts.length === 0 ? ( \r\n      //     <p className=\"contact-item__text\">\r\n      //       There are no contacts on your list yet\r\n      //     </p>\r\n      //   ) : (\r\n      //     contacts.map(item => (\r\n      //       <li className=\"contact-item\" key={item.id}>\r\n      //         <p className=\"contact-item__text\">\r\n      //           {item.name} :\r\n      //           <span className=\"contact-item__number\">{item.number}</span>\r\n      //         </p>\r\n\r\n      //         <Button\r\n      //           variant=\"outline-primary\"\r\n      //           type=\"button\"\r\n      //           onClick={() => {\r\n      //             getId(item.id);\r\n      //             openModal();\r\n      //           }}\r\n      //         >\r\n      //           Update\r\n      //         </Button>\r\n\r\n      //         <Button\r\n      //           variant=\"outline-primary\"\r\n      //           type=\"button\"\r\n      //           onClick={() => {\r\n      //             dispatch(contactsOperations.deleteContact(item.id));\r\n      //           }}\r\n      //         >\r\n      //           Delete\r\n      //         </Button>\r\n      //       </li>\r\n      //     ))\r\n      //   )}\r\n      // </ul>\r\n            */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n","import { useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default function ModalEdition({ showModal, onClose, children }) {\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const handleKeyDown = e => {\r\n    if (e.code === 'Escape') {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n  }, [handleKeyDown]);\r\n\r\n  // return (\r\n  //   <Modal\r\n  //     show={showModal}\r\n  //     onHide={() => onClose()}\r\n  //     size=\"lg\"\r\n  //     aria-labelledby=\"contained-modal-title-vcenter\"\r\n  //     centered\r\n  //     onClick={handleBackdropClick}\r\n  //   >\r\n  //     <Modal.Header closeButton>\r\n  //       <Modal.Title id=\"contained-modal-title-vcenter\">\r\n  //         Edite Contact\r\n  //       </Modal.Title>\r\n  //     </Modal.Header>\r\n  //     <Modal.Body>{children}</Modal.Body>\r\n  //     <Modal.Footer>\r\n  //       <Button size=\"lg\" onClick={onClose}>\r\n  //         Close\r\n  //       </Button>\r\n  //     </Modal.Footer>\r\n  //   </Modal>\r\n  // );\r\n\r\n  return createPortal(\r\n    <Modal\r\n      show={showModal}\r\n      onHide={() => onClose()}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      onClick={handleBackdropClick}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Edite Contact\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button size=\"lg\" onClick={onClose}>\r\n          Close\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>,\r\n\r\n    // <div className={styles.backdrop} onClick={handleBackdropClick}>\r\n    //   <div className={styles.content}>{children}</div>\r\n    // </div>,\r\n    modalRoot,\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { contactsOperations } from '../../redux/contacts';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function ContactEditor({ onSave, idForUpdate }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        return setName(value);\r\n      case 'number':\r\n        return setNumber(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const credentials = { name, number };\r\n\r\n    name === '' || number === ''\r\n      ? alert('PLEASE, ENTER NAME AND NUMBER')\r\n      : dispatch(\r\n          contactsOperations.updateContact({ idForUpdate, credentials }),\r\n        );\r\n    onSave();\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Form.Group controlId=\"formBasicName\" autoComplete=\"off\">\r\n        <Form.Label>Name</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Enter new name\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          autoComplete=\"off\"\r\n        />\r\n        <Form.Text className=\"text-muted\">\r\n          Please enter the new name of this contact\r\n        </Form.Text>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formBasicNumber\" autoComplete=\"off\">\r\n        <Form.Label>Telephone number</Form.Label>\r\n        <Form.Control\r\n          type=\"number\"\r\n          placeholder=\"Enter telephone number of new contact \"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          autoComplete=\"off\"\r\n        />\r\n      </Form.Group>\r\n      <Button variant=\"success\" size=\"lg\" type=\"submit\">\r\n        Update contact\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport ContactForm from '../components/contactForm/contactForm';\r\nimport ContactList from '../components/contactList/contactList';\r\n\r\nimport ModalEdition from '../components/modal/modal';\r\nimport ContactEditor from '../components/contactEditor/contactEditor';\r\n\r\nconst styles = {\r\n  container: {\r\n    minHeight: 'calc(100vh - 50px)',\r\n    padding: '20px',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  title: {\r\n    fontWeight: 500,\r\n    fontSize: 48,\r\n    textAlign: 'center',\r\n  },\r\n};\r\n\r\nexport default function ContactsView() {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [idForUpdate, setIdForUpdate] = useState('');\r\n\r\n  const toggleModal = () => setIsModalOpen(state => !state);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <h1 style={styles.title}>\r\n        This is PHONEBOOK PAGE{' '}\r\n        <span role=\"img\" aria-label=\"Hello\">\r\n          💁‍♀️\r\n        </span>\r\n      </h1>\r\n      <br />\r\n\r\n      <ContactForm />\r\n      <br />\r\n\r\n      <ContactList openModal={toggleModal} getId={setIdForUpdate} />\r\n      {isModalOpen && (\r\n        <ModalEdition showModal={isModalOpen} onClose={toggleModal}>\r\n          <ContactEditor onSave={toggleModal} idForUpdate={idForUpdate} />\r\n        </ModalEdition>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}